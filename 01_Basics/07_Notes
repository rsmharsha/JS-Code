
1. Primitive Number Declaration:
--------------------------------
let score = 400;
console.log(score); 
// Output: 400
// ‚úÖ Use this when you just need to work with simple numeric values.
// This is lightweight and the most common way to declare numbers.

2. Number Object Declaration:
-----------------------------
let balance = new Number(95);
// ‚ùóCreates a Number object (not a primitive number).
// typeof balance ‚Üí "object"
// ‚úÖ Rarely used. Only needed if:
// - You want to attach properties to a number (uncommon)
// - You want object-specific behavior (e.g., custom methods)

console.log(balance.toString().length);
// Output: 2 ‚Üí "95" as a string has 2 characters.
// üî∏ Use this to get how many digits a number has (as a string).

console.log(balance.toFixed(2));
// Output: "95.00"
// ‚úÖ Very useful in e-commerce to ensure prices are always shown with two decimals (even if .00)

3. Precision Handling:
----------------------
const otherNum = 123.8966;

console.log(otherNum.toPrecision(4));
// Output: "123.9"
// ‚úÖ Use when you want to format a number to a specific number of significant digits.
// Great for scientific calculations or data visualizations.

4. Locale String Formatting:
----------------------------
const hundreds = 1000000;

console.log(hundreds.toLocaleString('en-IN'));
// Output: "10,00,000"
// ‚úÖ Use this for showing numbers in a human-friendly format.
// Especially useful for dashboards, reports, or financial apps (Indian format in this case).

5. Number Constants:
--------------------
console.log(Number.MAX_VALUE);
// Output: ~1.7976931348623157e+308
// ‚úÖ Maximum number JS can handle. Useful in edge-case handling or validation.

console.log(Number.MIN_VALUE);
// Output: ~5e-324
// ‚úÖ Smallest positive number > 0 JS can represent. Important for scientific/precision work.

console.log(Number.MAX_SAFE_INTEGER);
// Output: 9007199254740991
// ‚úÖ Largest integer JS can safely handle without precision issues.
// Critical in financial applications to avoid rounding errors.

====================================
üìù Summary:

| Concept            | When to Use                                              |
|--------------------|----------------------------------------------------------|
| Primitive Number   | Always preferred for regular math and logic              |
| new Number()       | Rarely used, for object-like behavior or custom methods  |
| .toString().length | To count number of digits (as string)                    |
| .toFixed(2)        | For fixed decimal display (e.g., prices in e-commerce)   |
| .toPrecision(n)    | For limiting significant digits                          |
| .toLocaleString()  | For readable, regional formatting of numbers             |
| MAX/MIN/SAFE CONST | For handling or validating extreme numeric values        |
"""


JavaScript Math Object Explained
================================

1. Absolute Value:
------------------
console.log(Math.abs(-6)); 
// Output: 6
// ‚úÖ Use this to get the positive version of a number.
// Common in distance calculations, score differences, etc.

2. Ceiling Value (round up):
----------------------------
console.log(Math.ceil(4.6)); 
// Output: 5
// ‚úÖ Always rounds UP to the nearest integer.
// Useful when you always need to "round up" regardless of decimal.

3. Floor Value (round down):
----------------------------
console.log(Math.floor(4.6)); 
// Output: 4
// ‚úÖ Always rounds DOWN to the nearest integer.
// Useful when you need to restrict or cap values.

4. Standard Rounding:
---------------------
console.log(Math.round(4.6)); 
// Output: 5
// ‚úÖ Rounds to the nearest whole number.
// Use this for basic, expected rounding behavior.

5. Minimum & Maximum:
---------------------
console.log(Math.min(4, 6, 8, 5, 4)); 
// Output: 4
console.log(Math.max(4, 6, 8, 5, 4)); 
// Output: 8
// ‚úÖ Use these to find the smallest/largest in a list of values.
// Great for comparing scores, stats, dimensions, etc.

6. Random Number Generation:
----------------------------
console.log((Math.floor(Math.random() * 10)) + 1); 
// Output: A random number between 1 and 10
// ‚úÖ `Math.random()` gives a float between 0 and 1 (e.g., 0.5876)
// Multiply by 10 ‚Üí 0 to 9.999...
// `Math.floor()` cuts it to 0‚Äì9, then +1 gives 1‚Äì10

7. Random Number Within a Range:
--------------------------------
let max = 20;
let min = 10;
console.log(Math.floor(Math.random() * (max - min + 1)) + min); 
// Output: Random number between 10 and 20 (inclusive)
// ‚úÖ Used in games, quizzes, simulations where controlled randomness is needed
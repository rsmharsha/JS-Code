JavaScript Type Conversion - Notes
==================================

1. typeof Operator
------------------
let score = "49abc";
console.log(typeof score); // "string"

- typeof returns the data type of a variable.
- "49abc" is a string.

2. Conversion to Number
------------------------
let valueInNumber = Number(score);      // "49abc" => NaN
let valueInNumber2 = Number(undefined); // undefined => NaN

Conversion Examples:
- "33"     => 33
- "33abc"  => NaN
- true     => 1
- false    => 0
- undefined => NaN
- null     => 0

console.log(valueInNumber);      // NaN
console.log(valueInNumber2);     // NaN
console.log(typeof valueInNumber);  // number
console.log(typeof valueInNumber2); // number

Note: NaN is still of type "number".

3. Conversion to Boolean
-------------------------
let isLoggedIn = 1;
let booleanIsLoggedIn = Boolean(isLoggedIn);
console.log(booleanIsLoggedIn); // true

Truthy values:
- Any non-zero number
- Non-empty strings
- [], {}

Falsy values:
- 0
- "" (empty string)
- undefined
- null
- NaN
- false

4. Conversion to String
------------------------
let someNumber = 23;
let stringNumber = String(someNumber);
console.log(stringNumber);        // "23"
console.log(typeof stringNumber); // "string"

Summary Table
=============
| Value         | Number() | Boolean() | String()      |
|---------------|----------|-----------|---------------|
| "33"          | 33       | true      | "33"          |
| "33abc"       | NaN      | true      | "33abc"       |
| undefined     | NaN      | false     | "undefined"   |
| null          | 0        | false     | "null"        |
| true          | 1        | true      | "true"        |
| false         | 0        | false     | "false"       |
| 0             | 0        | false     | "0"           |
| 1             | 1        | true      | "1"           |


JavaScript Type Coercion in Expressions
=======================================

console.log("1" + 2);      // Output: "12"
console.log(1 + "2");      // Output: "12"
console.log("1" + 2 + 2);  // Output: "122"
console.log(1 + 2 + "2");  // Output: "32"

Explanation:
------------

1. "1" + 2
- "1" is a string.
- 2 is coerced to "2".
- Result: "1" + "2" = "12"

2. 1 + "2"
- 1 is coerced to "1".
- Result: "1" + "2" = "12"

3. "1" + 2 + 2
- "1" + 2 = "12"
- "12" + 2 = "122"
- Final result: "122"

4. 1 + 2 + "2"
- 1 + 2 = 3
- 3 + "2" = "32"
- Final result: "32"

Note:
- JavaScript evaluates expressions from left to right.
- If any operand is a string and + is used, it concatenates as a string.


console.log(true);
console.log(+true);
Unary Plus Operator in JavaScript
=================================

console.log(+true);   // Output: 1
console.log(+false);  // Output: 0

Explanation:
------------
- The unary plus operator (+) is used to convert values to numbers.
- true  => 1
- false => 0

This is a shorthand trick for type conversion to number.



console.log(true+);
Invalid JavaScript Expression: console.log(true+)
===============================================

Code:
-----
console.log(true+)

Output:
-------
Uncaught SyntaxError: Unexpected token ')'

Explanation:
------------
- The '+' operator needs two values (operands).
- Writing 'true +' without a second value is incomplete.
- When used inside console.log, it causes a SyntaxError.
- JavaScript sees: true + ) ‚Üê and this is invalid.

Correct Examples:
-----------------
console.log(true + 1);      // 2
console.log(true + false);  // 1
